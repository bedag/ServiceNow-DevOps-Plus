<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.JSLibCRC32</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>https://github.com/beatgammit/crc32&#13;
&#13;
Copyright (C) &lt;year&gt; by &lt;copyright holders&gt;&#13;
&#13;
Permission is hereby granted, free of charge, to any person obtaining a copy&#13;
of this software and associated documentation files (the "Software"), to deal&#13;
in the Software without restriction, including without limitation the rights&#13;
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#13;
copies of the Software, and to permit persons to whom the Software is&#13;
furnished to do so, subject to the following conditions:&#13;
&#13;
The above copyright notice and this permission notice shall be included in&#13;
all copies or substantial portions of the Software.&#13;
&#13;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#13;
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#13;
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#13;
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#13;
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#13;
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#13;
THE SOFTWARE.</description>
        <mobile_callable>false</mobile_callable>
        <name>JSLibCRC32</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global Class */
/* eslint no-undef: "error" */
var JSLibCRC32 = Class.create();
JSLibCRC32.prototype = {
	initialize: function () {

	},

	factory: function (libs) {
		const module = {};

void function(global, callback) {
	if (typeof module === 'object') {
		module.exports = callback();
	} else if (typeof define === 'function') {
		define(callback);
	} else {
		global.crc32 = callback();
	}
}(this, function() {
	'use strict';

	var table = [],
		poly = 0xEDB88320; // reverse polynomial

	// build the table
	function makeTable() {
		var c, n, k;

		for (n = 0; n < 256; n += 1) {
			c = n;
			for (k = 0; k < 8; k += 1) {
				if (c & 1) {
					c = poly ^ (c >>> 1);
				} else {
					c = c >>> 1;
				}
			}
			table[n] = c >>> 0;
		}
	}

	function strToArr(str) {
		// sweet hack to turn string into a 'byte' array
		return Array.prototype.map.call(str, function (c) {
			return c.charCodeAt(0);
		});
	}

	/*
	 * Compute CRC of array directly.
	 *
	 * This is slower for repeated calls, so append mode is not supported.
	 */
	function crcDirect(arr) {
		var crc = -1, // initial contents of LFBSR
			i, j, l, temp;

		for (i = 0, l = arr.length; i < l; i += 1) {
			temp = (crc ^ arr[i]) & 0xff;

			// read 8 bits one at a time
			for (j = 0; j < 8; j += 1) {
				if ((temp & 1) === 1) {
					temp = (temp >>> 1) ^ poly;
				} else {
					temp = (temp >>> 1);
				}
			}
			crc = (crc >>> 8) ^ temp;
		}

		// flip bits
		return crc ^ -1;
	}

	/*
	 * Compute CRC with the help of a pre-calculated table.
	 *
	 * This supports append mode, if the second parameter is set.
	 */
	function crcTable(arr, append) {
		var crc, i, l;

		// if we're in append mode, don't reset crc
		// if arr is null or undefined, reset table and return
		if (typeof crcTable.crc === 'undefined' || !append || !arr) {
			crcTable.crc = 0 ^ -1;

			if (!arr) {
				return;
			}
		}

		// store in temp variable for minor speed gain
		crc = crcTable.crc;

		for (i = 0, l = arr.length; i < l; i += 1) {
			crc = (crc >>> 8) ^ table[(crc ^ arr[i]) & 0xff];
		}

		crcTable.crc = crc;

		return crc ^ -1;
	}

	// build the table
	// this isn't that costly, and most uses will be for table assisted mode
	makeTable();

	var exports = function (val, direct) {
		var val = (typeof val === 'string') ? strToArr(val) : val,
			ret = direct ? crcDirect(val) : crcTable(val);

		// convert to 2's complement hex
		return (ret >>> 0).toString(16);
	};
	exports.direct = crcDirect;
	exports.table = crcTable;

	return exports;
});

		return module.exports;
	},

	type: 'crc32'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-28 15:41:06</sys_created_on>
        <sys_id>e7c3ec9383c656100971c810feaad313</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>JSLibCRC32</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_e7c3ec9383c656100971c810feaad313</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-28 15:48:04</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="DELETE">
        <id>e7c3ec9383c656100971c810feaad313</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-28 15:41:57</sys_created_on>
        <sys_id>73f3e81783c656100971c810feaad32e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-28 15:41:57</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</application>
        <file_path/>
        <instance_id>092f4577db2e3d9405ef1729139619fc</instance_id>
        <instance_name>dev222234</instance_name>
        <name>sys_script_include_e7c3ec9383c656100971c810feaad313</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_424426_devops.JSLibCRC32&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;https://github.com/beatgammit/crc32&amp;#13;
&amp;#13;
Copyright (C) &amp;lt;year&amp;gt; by &amp;lt;copyright holders&amp;gt;&amp;#13;
&amp;#13;
Permission is hereby granted, free of charge, to any person obtaining a copy&amp;#13;
of this software and associated documentation files (the "Software"), to deal&amp;#13;
in the Software without restriction, including without limitation the rights&amp;#13;
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&amp;#13;
copies of the Software, and to permit persons to whom the Software is&amp;#13;
furnished to do so, subject to the following conditions:&amp;#13;
&amp;#13;
The above copyright notice and this permission notice shall be included in&amp;#13;
all copies or substantial portions of the Software.&amp;#13;
&amp;#13;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&amp;#13;
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&amp;#13;
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&amp;#13;
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&amp;#13;
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&amp;#13;
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&amp;#13;
THE SOFTWARE.&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;JSLibCRC32&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/* global Class */
/* eslint no-undef: "error" */
var JSLibCRC32 = Class.create();
JSLibCRC32.prototype = {
	initialize: function () {

	},

	factory: function (libs) {
		const module = {};

void function(global, callback) {
	if (typeof module === 'object') {
		module.exports = callback();
	} else if (typeof define === 'function') {
		define(callback);
	} else {
		global.crc32 = callback();
	}
}(this, function() {
	'use strict';

	var table = [],
		poly = 0xEDB88320; // reverse polynomial

	// build the table
	function makeTable() {
		var c, n, k;

		for (n = 0; n &lt; 256; n += 1) {
			c = n;
			for (k = 0; k &lt; 8; k += 1) {
				if (c &amp; 1) {
					c = poly ^ (c &gt;&gt;&gt; 1);
				} else {
					c = c &gt;&gt;&gt; 1;
				}
			}
			table[n] = c &gt;&gt;&gt; 0;
		}
	}

	function strToArr(str) {
		// sweet hack to turn string into a 'byte' array
		return Array.prototype.map.call(str, function (c) {
			return c.charCodeAt(0);
		});
	}

	/*
	 * Compute CRC of array directly.
	 *
	 * This is slower for repeated calls, so append mode is not supported.
	 */
	function crcDirect(arr) {
		var crc = -1, // initial contents of LFBSR
			i, j, l, temp;

		for (i = 0, l = arr.length; i &lt; l; i += 1) {
			temp = (crc ^ arr[i]) &amp; 0xff;

			// read 8 bits one at a time
			for (j = 0; j &lt; 8; j += 1) {
				if ((temp &amp; 1) === 1) {
					temp = (temp &gt;&gt;&gt; 1) ^ poly;
				} else {
					temp = (temp &gt;&gt;&gt; 1);
				}
			}
			crc = (crc &gt;&gt;&gt; 8) ^ temp;
		}

		// flip bits
		return crc ^ -1;
	}

	/*
	 * Compute CRC with the help of a pre-calculated table.
	 *
	 * This supports append mode, if the second parameter is set.
	 */
	function crcTable(arr, append) {
		var crc, i, l;

		// if we're in append mode, don't reset crc
		// if arr is null or undefined, reset table and return
		if (typeof crcTable.crc === 'undefined' || !append || !arr) {
			crcTable.crc = 0 ^ -1;

			if (!arr) {
				return;
			}
		}

		// store in temp variable for minor speed gain
		crc = crcTable.crc;

		for (i = 0, l = arr.length; i &lt; l; i += 1) {
			crc = (crc &gt;&gt;&gt; 8) ^ table[(crc ^ arr[i]) &amp; 0xff];
		}

		crcTable.crc = crc;

		return crc ^ -1;
	}

	// build the table
	// this isn't that costly, and most uses will be for table assisted mode
	makeTable();

	var exports = function (val, direct) {
		var val = (typeof val === 'string') ? strToArr(val) : val,
			ret = direct ? crcDirect(val) : crcTable(val);

		// convert to 2's complement hex
		return (ret &gt;&gt;&gt; 0).toString(16);
	};
	exports.direct = crcDirect;
	exports.table = crcTable;

	return exports;
});

		return module.exports;
	},

	type: 'crc32'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;markus.kraus&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-11-28 15:41:06&lt;/sys_created_on&gt;&lt;sys_id&gt;e7c3ec9383c656100971c810feaad313&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;JSLibCRC32&lt;/sys_name&gt;&lt;sys_package display_value="DevOps+" source="x_424426_devops"&gt;0b41a31b97cf2110d70ef207f053afb0&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="DevOps+"&gt;0b41a31b97cf2110d70ef207f053afb0&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_e7c3ec9383c656100971c810feaad313&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;markus.kraus&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-11-28 15:48:04&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;e7c3ec9383c656100971c810feaad313&lt;/id&gt;&lt;sys_created_by&gt;markus.kraus&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-11-28 15:41:57&lt;/sys_created_on&gt;&lt;sys_id&gt;73f3e81783c656100971c810feaad32e&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;markus.kraus&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-11-28 15:41:57&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;true&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1667523121</payload_hash>
        <record_name>JSLibCRC32</record_name>
        <reverted_from/>
        <source>505bff84937fc210e02873718bba10ab</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-28 15:48:04</sys_created_on>
        <sys_id>a9656017830a56100971c810feaad337</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1937375421a0000001</sys_recorded_at>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-28 15:48:04</sys_updated_on>
        <type>Script Include</type>
        <update_guid>21656017210a5610b5a7f0bc93db4637</update_guid>
        <update_guid_history>21656017210a5610b5a7f0bc93db4637:-1667523121,08042cdf73865610a05f50f63dab8e84:1994742139,27c3ec93d7c65610ceb30f53a70da917:826623247</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2025-01-31 15:07:13</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>2cc2feccbdbd48e695fff1b050ae7844</sys_id>
        <sys_metadata>e7c3ec9383c656100971c810feaad313</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>JSLibCRC32</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_scope_delete display_value="">13019d42a0194df0a6459d2c1b62b640</sys_scope_delete>
        <sys_update_name>sys_script_include_e7c3ec9383c656100971c810feaad313</sys_update_name>
        <sys_update_version display_value="sys_script_include_e7c3ec9383c656100971c810feaad313">a9656017830a56100971c810feaad337</sys_update_version>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2025-01-31 15:07:13</sys_updated_on>
    </sys_metadata_delete>
</record_update>
