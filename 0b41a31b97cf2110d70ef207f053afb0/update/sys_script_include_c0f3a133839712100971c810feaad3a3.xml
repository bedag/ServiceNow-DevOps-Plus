<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.NPM</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>How to add npm packages:&#13;
1.) Open https://registry.npmjs.org/&lt;package-name&gt;/latest&#13;
2.) Download the .dist. tarball link&#13;
3.) Convert to zip: tar -xvzf &lt;downloaded&gt;.tgz &amp;&amp; zip -r &lt;downloaded&gt;.zip package/&#13;
4.) Upload zip file to this application's sys_app record</description>
        <mobile_callable>false</mobile_callable>
        <name>NPM</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global global, gs, sn_scoped_cache */
/* global Class, GlideRecord, GlideScriptedExtensionPoint, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var NPM = Class.create();
NPM.CACHE_NAME = 'devops_npm_packages';
NPM.flush = function () {
	const packages = sn_scoped_cache.ScopedCacheManager.get(NPM.CACHE_NAME, 'packages');
	packages.forEach(attSysID => sn_scoped_cache.ScopedCacheManager.flushScopedCache(NPM.CACHE_NAME, attSysID));
	sn_scoped_cache.ScopedCacheManager.flushScopedCache(NPM.CACHE_NAME, 'packages');
};
NPM.prototype = {
	initialize: function (options) {
		// use a NOW Sync infusable record (this runs with modern JS support)
		const scriptGr = new GlideRecord('sys_rte_eb_script_operation');
		scriptGr.addQuery('sys_id', '97fdb21397db71103c2d3f56f053af8c');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			this.scriptGr = scriptGr;
		} else {
			throw new Error('Cannot run without a script');
		}

		const eps = new GlideScriptedExtensionPoint().getExtensions('DevOpsExt');
		if (eps.length) {
			eps[0].initialize();
			this.ext = eps[0];
		} else {
			throw new Error(`${this.type} requires a SyncExt implementation`);
		}

		this.modules = {};
		const packages = sn_scoped_cache.ScopedCacheManager.get(NPM.CACHE_NAME, 'packages');
		if (packages && packages != '[]') {
			this.packages = JSON.parse(packages);
		} else {
			this.packages = [];

			const attGr = new GlideRecord('sys_attachment');
			attGr.addQuery('table_name', 'sys_app');
			attGr.addQuery('table_sys_id', '0b41a31b97cf2110d70ef207f053afb0');
			attGr.addQuery('content_type', 'application/zip');
			attGr.query();

			while (attGr.next()) {
				const attSysID = attGr.getUniqueValue();
				this.packages.push(attSysID);
			}
		}

		const pkgOrder = [];
		this.packages = this.packages.filter(attSysID => {
			try {
				const pkg = this._parsePackage(attSysID);
				for (const dep in pkg.dependencies) {
					// note: version resolution is currently not done
					pkgOrder.push(dep);
				}
				pkgOrder.push(pkg.name);
				this.modules[pkg.name] = pkg;
				return true;
			} catch (e) {
				const attGr = new GlideRecord('sys_attachment');
				attGr.addQuery('sys_id', attSysID);
				attGr.setLimit(1);
				attGr.query();
				if (attGr.next()) {
					gs.error(`Failed to parse NPM package '${attGr.file_name}': ${e}${(e.stack ? '\n' + e.stack : '')}`);
				} else {
					// remove non existing package silently
				}

				return false;
			}
		});

		pkgOrder.forEach(pkgName => {
			const pkg = this.modules[pkgName];
			if (!pkg) {
				gs.error(`Expected NPM package ${pkgName}`);
				return;
			}

			if (pkg.module) {
				// already initialized
				return;
			}

			pkg.module = this._importFile(pkg.files, ['package'], pkg.main);
		});

		sn_scoped_cache.ScopedCacheManager.put(NPM.CACHE_NAME, 'packages', JSON.stringify(this.packages));
	},

	require: function (moduleName) {
		const module = this.modules[moduleName];
		if (module?.module) {
			return module?.module;
		}

		gs.error('Unknown module: ' + moduleName);
	},

	_importFile: function (files, root, _filePath) {
		let file = [root];
		_filePath.split('/').forEach(f => {
			if (f == '..') {
				file.pop();
			} else if (f != '.') {
				file.push(f);
			}
		});

		file = file.join('/');
		if (file in files) {
			const module = files[file];
			if (module.inst) {
				return module.inst;
			}

			this.scriptGr.script = module.text;
			const gse = new GlideScopedEvaluator();
			const emptyObject = new Object();
			const moduleExport = {
				exports: emptyObject
			};
			const globalExport = {};
			const self = this;
			gse.putVariable('require', function (subFile) {
				return self.modules[subFile]?.module || self._importFile(files, file.split('/').slice(0, -1).join('/'), subFile);
			});
			gse.putVariable('global', globalExport);
			gse.putVariable('module', moduleExport);
			gse.putVariable('exports', moduleExport.exports);
			const res = gse.evaluateScript(this.scriptGr, 'script');

			if (Object.keys(moduleExport.exports).length || moduleExport.exports != emptyObject) {
				return moduleExport.exports;
			} else if (Object.keys(globalExport).length == 1) {
				return globalExport[Object.keys(globalExport)[0]];
			}
			
			throw new Error('Unknown NPM module initialization');
		}
		
		throw new Error('Unknown File: ' + file);
	},

	_parsePackage: function (attSysID) {
		let module = sn_scoped_cache.ScopedCacheManager.get(NPM.CACHE_NAME, attSysID);
		if (module) {
			module = JSON.parse(module);
		} else {
			const zipEntries = this.ext.getZIPEntries(attSysID, { withContent: true });
			if (zipEntries.length == 0 || zipEntries[0].name != 'package/') {
				throw new Error('Invalid NPM package');
			}

			const files = {};
			zipEntries.forEach(e => {
				if (!e.directory) {
					files[e.name] = String.fromCharCode(...e.bytes);
				}
			});
			
			const config = JSON.parse(files['package/package.json'] || null);
			if (!config) {
				gs.info(JSON.stringify(files, null, 2));
				throw new Error ('Invalid NPM package: package.json is missing');
			}

			if (!config.name) {
				gs.info(JSON.stringify(files, null, 2));
				throw new Error('Invalid NPM package: name missing');
			}

			module = {
				files: files,
				main: config.main || 'index.js',
				name: config.name,
				dependencies: config.dependencies
			};
			sn_scoped_cache.ScopedCacheManager.put(NPM.CACHE_NAME, attSysID, JSON.stringify(module));
		}

		for (const file in module.files) {
			module.files[file] = {
				text: module.files[file],
				inst: null
			};
		}

		return module;
	},

	addPackage: function (attSysID) {
		try {
			const module = this._parsePackage(attSysID);
			this.modules[module.name] = module;
			this.packages.push(attSysID);
			sn_scoped_cache.ScopedCacheManager.put(NPM.CACHE_NAME, 'packages', JSON.stringify(this.packages));
		} catch (e) {
			const attGr = new GlideRecord('sys_attachment');
			attGr.addQuery('sys_id', attSysID);
			attGr.setLimit(1);
			attGr.query();
			if (attGr.next()) {
				gs.error(`Failed to add NPM module '${attGr.file_name}': e${(e.stack ? '\n' + e.stack : '')}`);
			}
		}
	},

	removePackage: function (attSysID) {
		sn_scoped_cache.ScopedCacheManager.flushScopedCache(NPM.CACHE_NAME, attSysID);

		this.packages = this.packages.filter(p => p != attSysID);
		sn_scoped_cache.ScopedCacheManager.put(NPM.CACHE_NAME, 'packages', JSON.stringify(this.packages));
	},

	type: 'NPM'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2025-01-31 13:03:10</sys_created_on>
        <sys_id>c0f3a133839712100971c810feaad3a3</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>NPM</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_c0f3a133839712100971c810feaad3a3</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2025-01-31 15:29:21</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c0f3a133839712100971c810feaad3a3</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2025-01-31 13:03:09</sys_created_on>
        <sys_id>f16521f3839712100971c810feaad352</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2025-01-31 13:03:09</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
